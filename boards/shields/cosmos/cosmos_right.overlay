#include "cosmos.dtsi"
#include "pmw3610.dtsi"
#include "split_input.dtsi"
#include "cosmos-layouts.dtsi"
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors/input_gestures_accel.dtsi>

&default_transform {
	col-offset = <5>;
};

&trackball_split_input { // local trackball *split* input device child node
	device = <&trackball>;
	input-processors =
		<&zip_xy_scaler 1 1>;
};

&pointer_accel { // this needs to be put BEFORE input-listener
    input-type = <INPUT_EV_REL>;
    codes = <INPUT_REL_X INPUT_REL_Y>;
    sensitivity = <1000>;         // 1.0x base sensitivity
	min-factor = <800>;			  // 0.8x minimum for percision
    max-factor = <3000>;          // 3.0x maximum acceleration
    acceleration-exponent = <2>;  // Advanced exponential curve (1-5)
    y-boost = <1100>;             // 1.1x Y-axis boost for widescreen
    speed-threshold = <600>;      // Start acceleration at 600 counts/sec
    speed-max = <3500>;           // Max acceleration at 3500 counts/sec
    min-factor = <1000>;          // 1.0x minimum (no deceleration)
};

/ {
	chosen {
		zmk,kscan = &kscan0;
	};

	kscan0: kscan {
		compatible = "zmk,kscan-gpio-matrix";
		diode-direction = "col2row";
		col-gpios =
			<&gpio1  6 (GPIO_ACTIVE_HIGH)>, // col_0_right P1.06
			<&gpio1  4 (GPIO_ACTIVE_HIGH)>, // col_1_right P1.04
			<&gpio0 11 (GPIO_ACTIVE_HIGH)>, // col_2_right P0.11
			<&gpio1  0 (GPIO_ACTIVE_HIGH)>, // col_3_right P1.00
			<&gpio0 24 (GPIO_ACTIVE_HIGH)>; // col_4_right P0.24
		row-gpios =
			<&gpio1 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, // row_0_right P1.13
			<&gpio1 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, // row_1_right P1.11
			<&gpio0 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, // row_2_right P0.10
			<&gpio0  9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; // row_3_right P0.09
		wakeup-source;
	};

	trackball_listener: trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
		input-processors = 
			<&zip_xy_scaler 1 1>,
			<&pointer_accel>;
		scroll {
            layers = <5>; // SCROLL
            input-processors =
                <&zip_xy_scaler 1 5>,
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };
    };
};